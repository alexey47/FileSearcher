<ResourceDictionary x:Class="FileSearcher.Styles"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:views="clr-namespace:FileSearcher.Views">
    <!--#region Colors-->
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="BorderBrushColor" Color="#434346"/>
    <SolidColorBrush x:Key="Color1" Color="#f1f1f1"/>
    <SolidColorBrush x:Key="Color2" Color="#252526"/>
    <SolidColorBrush x:Key="Color3" Color="#007acc"/>
    <SolidColorBrush x:Key="Color4" Color="#333337"/>
    <SolidColorBrush x:Key="Color5" Color="#3f3f46"/>

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#007acc"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#007acc"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="#f1f1f1"/>
    <!--#endregion-->

    <Style TargetType="{x:Type views:MainWindow}">
        <Setter Property="Foreground" Value="{StaticResource Color1}"/>
        <Setter Property="Background" Value="{StaticResource Color2}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Color3}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                              GlassFrameThickness="1"
                              ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" 
                              UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border x:Name="windowBorder"
                            BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=BorderBrush}"
                            BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=BorderThickness}"
                            Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Grid x:Name="captionGrid" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Image x:Name="appIcon" 
                                       Grid.Column="0"
                                       Stretch="UniformToFill" Margin="8, 0, 0, 0"
                                       Width="16" Height="16"
                                       HorizontalAlignment="Left" VerticalAlignment="Center"
                                       Source="{Binding Icon, RelativeSource={RelativeSource AncestorType=Window}}"/>
                                <TextBlock x:Name="captionText"
                                           Grid.Column="1"
                                           Margin="8,0,0,0"
                                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                                           VerticalAlignment="Center"
                                           TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                                <StackPanel Grid.Column="2"
                                            HorizontalAlignment="Right" VerticalAlignment="Top"
                                            Orientation="Horizontal"
                                            Height="30">
                                    <Button x:Name="btnMinimizeButton" 
                                            Height="30" Width="45"
                                            Background="Transparent" BorderBrush="Transparent"
                                            Click="MinimizeButtonClick">
                                        <Path Width="10" Height="10" 
                                              Data="M0,4 L10,4 L10,5 L0,5 Z"
                                              Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button>
                                    <Button x:Name="btnMaximizeButton" 
                                            Height="30" Width="45"
                                            Background="Transparent" BorderBrush="Transparent"
                                            Click="MaximizeButtonClick">
                                        <Path Width="10" Height="10" 
                                              Data="M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z"
                                              Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button>
                                    <Button x:Name="btnRestoreButton" 
                                            Height="30" Width="45"
                                            Background="Transparent" BorderBrush="Transparent"
                                            Visibility="Collapsed"
                                            Click="MaximizeButtonClick">
                                        <Path Width="10" Height="10" 
                                              Data="M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z"
                                              Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button>
                                    <Button x:Name="btnCloseButton" 
                                            Height="30" Width="45"
                                            Background="Transparent" BorderBrush="Transparent"
                                            Click="CloseButtonClick">
                                        <Path Width="10" Height="10" 
                                              Data="M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z"
                                              Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"/>
                                    </Button>
                                </StackPanel>
                            </Grid>
                            <ContentPresenter x:Name="windowContent"
                                              Grid.Row="1"/>
                            <ResizeGrip x:Name="resizeGrip" 
                                        Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" 
                                        IsTabStop="False" Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="windowBorder" Property="Border.BorderBrush" Value="{StaticResource Color2}" />
                            <Setter TargetName="captionGrid" Property="TextBlock.Foreground" Value="Gray"/>
                            <Setter TargetName="btnCloseButton" Property="TextBlock.Foreground" Value="Gray"/>
                            <Setter TargetName="btnMaximizeButton" Property="TextBlock.Foreground" Value="Gray"/>
                            <Setter TargetName="btnMinimizeButton" Property="TextBlock.Foreground" Value="Gray"/>
                            <Setter TargetName="btnRestoreButton" Property="TextBlock.Foreground" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Minimized"/>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="btnMaximizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnRestoreButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanMinimize">
                            <Setter TargetName="btnMaximizeButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="btnRestoreButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="btnMinimizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnMaximizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnRestoreButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="resizeGrip" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource Color1}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource Color1}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color2}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color3}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource Color1}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource Color1}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color2}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color1}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource Color2}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource Color2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color3}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color3}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource Color1}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource Color1}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background"
                Value="{StaticResource Color2}"/>
        <Setter Property="Foreground"
                Value="{StaticResource Color1}"/>
        <Setter Property="BorderBrush"
                Value="{StaticResource BorderBrushColor}"/>
    </Style>
    <Style TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color3}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color3}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Color1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" 
                Value="{StaticResource Color1}"/>
        <Setter Property="Background" 
                Value="{StaticResource Color2}"/>
        <Setter Property="BorderBrush" 
                Value="{StaticResource BorderBrushColor}"/>

        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color3}"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color5}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color3}"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color5}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource Color1}"/>
        <Setter Property="Background" Value="{StaticResource Color4}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrushColor}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource Color3}"/>
    </Style>
    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{StaticResource Color3}"/>
    </Style>

    <!--#region DataGrid-->
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                        <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="Background" Value="{StaticResource Color2}"/>
        <Setter Property="Foreground" Value="{StaticResource Color1}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrushColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <Button Grid.Row="0" Grid.Column="0" Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Row="0" Grid.Column="1" Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="false"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource Color1}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background" Value="{StaticResource Color4}"/>
        <Setter Property="SeparatorBrush" Value="{StaticResource Color3}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder Background="{TemplateBinding Background}" 
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    IsClickable="{TemplateBinding CanUserSort}"
                                                    IsPressed="{TemplateBinding IsPressed}"
                                                    IsHovered="{TemplateBinding IsMouseOver}"
                                                    Padding="{TemplateBinding Padding}"
                                                    SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                                    SortDirection="{TemplateBinding SortDirection}"
                                                    SeparatorVisibility="{TemplateBinding SeparatorVisibility}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </theme:DataGridHeaderBorder>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        <Border HorizontalAlignment="Right" Background="{StaticResource Color2}" Width="1"/>
                        <Border HorizontalAlignment="Left" Background="{StaticResource Color2}" Width="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Height" Value="20"/>
    </Style>
    <!--#endregion-->

</ResourceDictionary>